# -*- coding: utf-8 -*-
"""crypto_ui_pda111

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r8mpvNpvSBTn-K9CnW7NOgVzhQ_B-ezd
"""

!pip install ta
!pip install streamlit
!pip install yfinance
!pip install altair

import pandas as pd
import numpy as np
import yfinance as yf
import ta

# List of cryptocurrencies
cryptos = ['BTC-USD', 'ETH-USD', 'BNB-USD', 'USDT-USD', 'ADA-USD', 'XRP-USD', 'DOGE-USD', 'USDC-USD', 'BCH-USD', 'LTC-USD', 'LINK-USD', 'MATIC-USD', 'XLM-USD', 'THETA-USD', 'VET-USD', 'FIL-USD', 'TRX-USD', 'XMR-USD']

# Define the start and end dates for which you want the data
start_date = '2018-01-01'
end_date = '2023-12-31'

# Initialize an empty DataFrame to store the data
data = pd.DataFrame()

# Download the data for each cryptocurrency and append it to the DataFrame
for crypto in cryptos:
    df = yf.download(crypto, start=start_date, end=end_date)
    df['Name'] = crypto  # Add a 'Name' column
    df.reset_index(inplace=True)  # Reset the index

    # Calculate RSI
    df['RSI'] = ta.momentum.rsi(df['Close'])

    # Calculate SMA
    df['SMA'] = df['Close'].rolling(window=14).mean()

    # Calculate MACD
    df['MACD'] = ta.trend.macd_diff(df['Close'])

    # Calculate Bollinger Bands
    indicator_bb = ta.volatility.BollingerBands(close=df["Close"], window=20, window_dev=2)
    df['bb_bbm'] = indicator_bb.bollinger_mavg()  # Middle Band
    df['bb_bbh'] = indicator_bb.bollinger_hband()  # Upper Band
    df['bb_bbl'] = indicator_bb.bollinger_lband()  # Lower Band

    # Calculate daily returns
    df['Daily Returns'] = df['Adj Close'].pct_change()

    data = data.append(df)

# Replace NaN values with 0
data[['RSI', 'SMA', 'MACD', 'bb_bbm', 'bb_bbh', 'bb_bbl', 'Daily Returns']] = data[['RSI', 'SMA', 'MACD', 'bb_bbm', 'bb_bbh', 'bb_bbl', 'Daily Returns']].fillna(0)

# Keep only the 'Date', 'Name', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'RSI', 'SMA', 'MACD', 'bb_bbm', 'bb_bbh', 'bb_bbl', 'Daily Returns' columns
data = data[['Date', 'Name', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'RSI', 'SMA', 'MACD', 'bb_bbm', 'bb_bbh', 'bb_bbl', 'Daily Returns']]

# Print the data
print(data)

import streamlit as st
import pandas as pd
import plotly.express as px

# Sidebar
st.sidebar.header('Select Crypto Currency')
selected_crypto = st.sidebar.selectbox('Crypto type', data['Name'].unique())

# Filtering data
data_selected = data[data['Name'] == selected_crypto]

# Main
st.header(f'{selected_crypto} from 2018 to 2023')
fig = px.line(data_selected, x='Date', y=['Open', 'High', 'Low', 'Close'], title=f'{selected_crypto} OHLC Prices')
fig.update_xaxes(rangeslider_visible=True)
st.plotly_chart(fig)

st.header(f'{selected_crypto} Volume')
fig2 = px.line(data_selected, x='Date', y='Volume', title=f'{selected_crypto} Volume')
fig2.update_xaxes(rangeslider_visible=True)
st.plotly_chart(fig2)

st.header(f'{selected_crypto} RSI and SMA')
fig3 = px.line(data_selected, x='Date', y=['RSI', 'SMA'], title=f'{selected_crypto} RSI and SMA')
fig3.update_xaxes(rangeslider_visible=True)
st.plotly_chart(fig3)

st.header(f'{selected_crypto} MACD')
fig4 = px.line(data_selected, x='Date', y='MACD', title=f'{selected_crypto} MACD')
fig4.update_xaxes(rangeslider_visible=True)
st.plotly_chart(fig4)

st.header(f'{selected_crypto} Bollinger Bands')
fig5 = px.line(data_selected, x='Date', y=['bb_bbm', 'bb_bbh', 'bb_bbl'], title=f'{selected_crypto} Bollinger Bands')
fig5.update_xaxes(rangeslider_visible=True)
st.plotly_chart(fig5)

st.header(f'{selected_crypto} Daily Returns')
fig6 = px.line(data_selected, x='Date', y='Daily Returns', title=f'{selected_crypto} Daily Returns')
fig6.update_xaxes(rangeslider_visible=True)
st.plotly_chart(fig6)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile crypto_ui_pda111.py
# # Your Streamlit code goes here
#

